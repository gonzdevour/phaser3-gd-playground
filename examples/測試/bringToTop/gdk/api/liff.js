window.initializeLiff = function(myLiffId, onSuccess, onError) {
    liff
        .init({
            liffId: myLiffId
        })
        .then(() => {
            // start to use LIFF's api, if Liff is logged in, profile will be sent by callback.
            initializeApp();
            //onSuccess(window.liffGetProfile());
            c2_callFunction('log', ['Liff init success']);
        })
        .catch((err) => {
            //onError(err);
            c2_callFunction('log', [err]);
        });
}

/**
 * Initialize the app by calling functions handling individual app components
 */
function initializeApp() {
    displayLiffData();
    displayIsInClientInfo();

    // check if the user is logged in/out, and disable inappropriate button
    if (liff.isLoggedIn()) {
        c2_callFunction('log', ['liff is logged in']);
    } else {
        c2_callFunction('log', ['liff is not logged in']);
    }
}

/**
* Display data generated by invoking LIFF methods
*/
function displayLiffData() {
    lan = liff.getLanguage();
    ver = liff.getVersion();
    client = liff.isInClient();
    login = liff.isLoggedIn();
    os = liff.getOS();
    c2_callFunction('displayLiffData', [lan, ver, client, login, os]);
}

/**
* Toggle the login/logout buttons based on the isInClient status, and display a message accordingly
*/
function displayIsInClientInfo() {
    if (liff.isInClient()) {
        c2_callFunction('log', ['You are opening the app in the in-app browser of LINE.']);
    } else {
        c2_callFunction('log', ['You are opening the app in an external browser.']);
    }
}

window.liffLogin = function() {
    if (liff.isLoggedIn()) {
        // set `redirectUri` to redirect the user to a URL other than the front page of your LIFF app.
        c2_callFunction('log', ['Liff has already logged in']);
    } else {
        liff.login();
    }
}

window.liffLogout = function() {
    if (liff.isLoggedIn()) {
        liff.logout();
        window.location.reload();
    } else {
        c2_callFunction('log', ['Liff cannot logout cuz you are not logged in.']);
    }
}

window.liffGetProfile = function(onSuccess, onError) {
    liff.getProfile()
    .then(profile => {
      onSuccess(profile);
    })
    .catch((err) => {
      onError(err);
    });
}

/**
* ifExternal is a boolean. Open external url if true, open line in-app-browser if false.
*/
window.liffOpenWindow = function(address, ifExternal) {
    liff.openWindow({
        url: address,
        external: ifExternal
    });
}

/**
* scan qrcode is not available on iOS 9+
*/
window.liffScan = function(onSuccess, onError) {
    if (!liff.isInClient()) {
        alert('this function is only available on Line LIFF');
    } else {
    	if (liff.scanCode) {
	        liff.scanCode().then(result => {
                // e.g. result = { value: "Hello LIFF app!" }
                var res = JSON.stringify(result.value);
                var resvalue = res.replace(/^"|"$/g, '');
                onSuccess(resvalue);
                //toggleQrCodeReader();
	        }).catch((error) => {
                onError(error);
	        });
    	}
    }
}

/**
* type: text, image, audio, video, template, flex
*/
window.liffSend = function(msgtype, msg, onSuccess, onError) {
    if (!liff.isInClient()) {
        alert('this function is only available on Line LIFF');
    } else {
        liff.sendMessages([{
            'type': msgtype,
            'text': msg
        }]).then(function() {
            onSuccess(msg);
        }).catch(function(error) {
            alert(error);
        });
    }
}

/**
* type: text, image, audio, video, template, flex
*/
window.liffShare = function(msgtype, msg, onSuccess, onError) {
    if (!liff.isInClient()) {
        alert('this function is only available on Line LIFF');
    } else {
        liff.shareTargetPicker([{
            'type': msgtype,
            'text': msg
        }]).then(function() {
            onSuccess(msg);
        }).catch(function(error) {
            onError(error);
        });
    }
}

window.liffClose = function() {
    if (!liff.isInClient()) {
        alert('this function is only available on Line LIFF');
    } else {
        liff.closeWindow();
    }
}